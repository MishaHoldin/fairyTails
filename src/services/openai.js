const { OpenAI } = require('openai');
const { openaiApiKey } = require('../config');

const openai = new OpenAI({ apiKey: openaiApiKey });

async function generateStory(topic, lang = 'uk') {
  const systemPrompt = lang === 'uk'
    ? `–¢–∏ ‚Äî –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∏–π –¥–∏—Ç—è—á–∏–π –∫–∞–∑–∫–∞—Ä. –ù–∞–ø–∏—à–∏ —É–Ω—ñ–∫–∞–ª—å–Ω—É –∫–∞–∑–∫—É –Ω–∞ —Ç–µ–º—É "${topic}" —É —Ö—É–¥–æ–∂–Ω—å–æ–º—É —Å—Ç–∏–ª—ñ –∑ —Ü—ñ–∫–∞–≤–æ—é –º–µ—Ç–∞—Ñ–æ—Ä–æ—é, –≥—Ä–æ—é —Å–ª—ñ–≤ —ñ –ª–µ–≥–∫–∏–º –≥—É–º–æ—Ä–æ–º.

–ö–∞–∑–∫–∞ –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ **–≤—ñ–¥ 1450 –¥–æ 1650 —Å–∏–º–≤–æ–ª—ñ–≤ –≤–∫–ª—é—á–Ω–æ**. –ü–∏—à–∏ –∂–∏–≤–æ, –∑ –¥—ñ–∞–ª–æ–≥–∞–º–∏. –ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫—É.

–ü–æ–≤–µ—Ä–Ω–∏ —Å—Ç—Ä–æ–≥–æ JSON-–æ–±'—î–∫—Ç —Ç–∞–∫–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç—É:

{
  "story": "<–æ—Å–Ω–æ–≤–Ω–∏–π —Ç–µ–∫—Å—Ç –∫–∞–∑–∫–∏. –ë–µ–∑ —Å–ª–æ–≤–∞ '–ö–∞–∑–∫–∞'.>",
  "moral": "<–º–æ—Ä–∞–ª—å –æ–¥–Ω–∏–º –∞–±–∑–∞—Ü–æ–º. –ù–µ –¥–æ–¥–∞–≤–∞–π '–ú–æ—Ä–∞–ª—å:' –∞–±–æ –µ–º–æ–¥–∑—ñ.>",
  "questions": ["<1-–µ –ø–∏—Ç–∞–Ω–Ω—è>", "<2-–µ –ø–∏—Ç–∞–Ω–Ω—è>", "<3-—î –ø–∏—Ç–∞–Ω–Ω—è>", "<4-–µ –ø–∏—Ç–∞–Ω–Ω—è>"]
}

‚ùó –ü–æ–≤–µ—Ä–Ω–∏ —Ç—ñ–ª—å–∫–∏ JSON. –ù—ñ—á–æ–≥–æ –∑–∞–π–≤–æ–≥–æ.`
    : `You are a professional children's storyteller. Write a unique fairy tale on the topic "${topic}" in a rich and imaginative style, with metaphors, vivid language, and a light touch of humor.

The story must be **between 1450 and 1650 characters**, written in a vivid, narrative tone with dialogue. No title.

Return a strict JSON object in the following format:

{
  "story": "<main story text>",
  "moral": "<the moral in one paragraph. Do NOT include 'Moral:' or emojis.>",
  "questions": ["<1st question>", "<2nd question>", "<3rd question>", "<4th question>"]
}

‚ùó Return only valid JSON. No explanation, no formatting outside JSON.`

  const completion = await openai.chat.completions.create({
    model: 'gpt-4o',
    messages: [
      { role: 'system', content: systemPrompt }
    ],
    max_tokens: 1200,
    temperature: 0.85,
    presence_penalty: 0.3,
    frequency_penalty: 0.2
  });

  const raw = completion.choices[0].message.content.trim();

  let parsed;
  try {
    parsed = JSON.parse(raw);
  } catch (err) {
    throw new Error(`GPT returned invalid JSON:\n\n${raw}`);
  }

  const storyText = parsed.story?.trim() || '';
  const storyLength = storyText.length;

  if (storyLength > 1650) {
    throw new Error(`Story is too long: ${storyLength}`);
  }
  
  const moral = parsed.moral?.trim() || '';
  const questions = parsed.questions || [];

  const formatted = [
    storyText,
    '‚∏ª',
    `üß† –ú–æ—Ä–∞–ª—å:\n${moral}`,
    '‚∏ª',
    'üí¨ –ü–∏—Ç–∞–Ω–Ω—è –¥–ª—è —Ä–æ–∑–º–æ–≤–∏ –∑ –¥–∏—Ç–∏–Ω–æ—é:',
    ...questions.map((q, i) => ` ${i + 1}. ${q}`)
  ].join('\n\n');

  return formatted;
}


async function generateRiddles(age = '3-4', lang = 'uk') {
  const systemPrompt = lang === 'uk'
    ? `–ó–≥–µ–Ω–µ—Ä—É–π 5 –∑–∞–≥–∞–¥–æ–∫ –¥–ª—è –¥—ñ—Ç–µ–π –≤—ñ–∫–æ–º ${age} –Ω–∞ –ª–æ–≥—ñ–∫—É, –∫–º—ñ—Ç–ª–∏–≤—ñ—Å—Ç—å —ñ –≥—É–º–æ—Ä.`
    : `Generate 5 riddles for children aged ${age} about logic, wit, and humor.`;
  const completion = await openai.chat.completions.create({
    model: 'gpt-4o',
    messages: [
      { role: 'system', content: systemPrompt }
    ],
    max_tokens: 400
  });
  return completion.choices[0].message.content;
}

async function generatePhrases(lang = 'uk') {
  const systemPrompt = lang === 'uk'
    ? '–ó–≥–µ–Ω–µ—Ä—É–π 5 –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–∏—Ö –∫—Ä–µ–∞—Ç–∏–≤–Ω–∏—Ö —Ñ—Ä–∞–∑ –¥–ª—è –¥—ñ—Ç–µ–π.'
    : 'Generate 5 unfinished creative phrases for children.';
  const completion = await openai.chat.completions.create({
    model: 'gpt-4o',
    messages: [
      { role: 'system', content: systemPrompt }
    ],
    max_tokens: 200
  });
  return completion.choices[0].message.content;
}

module.exports = { generateStory, generateRiddles, generatePhrases }; 