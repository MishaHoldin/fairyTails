require('dotenv').config();
const TelegramBot = require('node-telegram-bot-api');
const { InputFile } = require('node-telegram-bot-api');
const i18next = require('i18next');
const Backend = require('i18next-fs-backend');
const path = require('path');
const { 
  logStoryGeneration, 
  logImageGeneration, 
  logAudioGeneration, 
  logRiddleGeneration, 
  logPhraseGeneration,
  logError 
} = require('./utils/logger');

const { generateStory, generateRiddles, generatePhrases } = require('./services/openai');
const { generateImage } = require('./services/dalle');
const { generateAudio } = require('./services/elevenlabs');
const { checkLimit, incrementUsage } = require('./utils/limiter');

const bot = new TelegramBot(process.env.TG_BOT_TOKEN, { polling: true });

// i18n init
i18next.use(Backend).init({
  lng: 'uk',
  fallbackLng: 'uk',
  backend: {
    loadPath: path.join(__dirname, 'localization/{{lng}}.json')
  }
});

const LANGS = {
  uk: '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞',
  en: 'English'
};

const getMainMenu = (lang) => ({
  reply_markup: {
    keyboard: [
      [{ text: lang === 'uk' ? '–ö–∞–∑–∫–∞' : 'Story' }],
      [{ text: lang === 'uk' ? '–ó–∞–≥–∞–¥–∫–∏' : 'Riddles' }, { text: lang === 'uk' ? '–ö—Ä–µ–∞—Ç–∏–≤' : 'Creativity' }],
      [{ text: lang === 'uk' ? '–í—ñ–∑—É–∞–ª—å–Ω–∏–π –∫—Ä–µ–∞—Ç–∏–≤' : 'Visual Creativity' }],
      [
        { text: lang === 'uk' ? 'üìä –ú–æ—ó –ª—ñ–º—ñ—Ç–∏' : 'üìä My Limits' },
        { text: lang === 'uk' ? 'üí≥ –û–ø–ª–∞—Ç–∞' : 'üí≥ Payment' }
      ],
      [{ text: lang === 'uk' ? 'üéÅ –ó–∞–ø—Ä–æ—Å–∏—Ç–∏ –¥—Ä—É–≥–∞' : 'üéÅ Invite Friend' }]
    ],
    resize_keyboard: true
  }
});

const userLang = {};
const userState = {};

bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  userState[chatId] = null;
  bot.sendMessage(chatId, i18next.t('choose_language'), {
    reply_markup: {
      inline_keyboard: [
        [
          { text: '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞', callback_data: 'lang_uk' },
          { text: 'English', callback_data: 'lang_en' }
        ]
      ]
    }
  });
});

bot.on('callback_query', async (query) => {
  const chatId = query.message.chat.id;
  if (query.data.startsWith('lang_')) {
    const lang = query.data.split('_')[1];
    userLang[chatId] = lang;
    userState[chatId] = null;
    i18next.changeLanguage(lang);
    bot.sendMessage(chatId, i18next.t('start'), getMainMenu(lang));
  }
});

bot.on('message', async (msg) => {
  const chatId = msg.chat.id;
  const lang = userLang[chatId] || 'uk';
  const text = msg.text;

  try {
    if (userState[chatId]?.step === 'awaiting_story_topic') {
      const topic = text;
      logStoryGeneration(chatId, topic, lang);
    
      if (!(await checkLimit(chatId))) {
        userState[chatId] = null;
        return bot.sendMessage(chatId, lang === 'uk' ? '–í–∏—á–µ—Ä–ø–∞–Ω–æ –ª—ñ–º—ñ—Ç –≥–µ–Ω–µ—Ä–∞—Ü—ñ–π.' : 'Generation limit reached.');
      }
    
      await bot.sendMessage(chatId, lang === 'uk' ? '‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ç—Ä–∏–≤–∞—î...' : '‚è≥ Generating...');
    
      try {
        const storyText = await generateStory(topic, lang);
        await incrementUsage(chatId);
    
        const output = `${i18next.t('story_ready', { lng: lang })}\n\n${storyText}`;
        await bot.sendMessage(chatId, output);
      } catch (err) {
        logError(err, { chatId, text, step: 'awaiting_story_topic' });
        userState[chatId] = null;
        return bot.sendMessage(chatId, lang === 'uk'
          ? '–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—É –∫–∞–∑–∫—É. –°–ø—Ä–æ–±—É–π—Ç–µ —ñ–Ω—à—É —Ç–µ–º—É.'
          : 'Failed to generate a valid story. Please try another topic.');
      }
    
      // –ö–∞—Ä—Ç–∏–Ω–∫–∞ (—Å fallback)
      try {
        logImageGeneration(chatId, topic);
        await bot.sendMessage(chatId, lang === 'uk' ? '–ì–µ–Ω–µ—Ä—É—é –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è...' : 'Generating image...');
        const image = await generateImage(topic);
        console.log('üì¶ [sendPhoto] Sending image buffer to Telegram. Size:', image.length);
        await bot.sendPhoto(chatId, image, {
          filename: 'story.png',
          contentType: 'image/png'
        });
      } catch (err) {
        logError(err, { chatId, step: 'image_generation' });
        await bot.sendMessage(chatId, lang === 'uk'
          ? '‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è. –ê–ª–µ –∫–∞–∑–∫–∞ –≤–∂–µ –≥–æ—Ç–æ–≤–∞!'
          : '‚ö†Ô∏è Failed to generate image. But the story is ready!');
      }
    
      // –û–∑–≤—É—á–∫–∞ (–±–µ–∑ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–∞ —ç—Ç–æ–º —ç—Ç–∞–ø–µ ‚Äî —Ç–æ–ª—å–∫–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ)
      try {
        await bot.sendMessage(chatId, lang === 'uk'
          ? '–û–∑–≤—É—á–∏—Ç–∏ –∫–∞–∑–∫—É? (–∂—ñ–Ω–æ—á–∏–π/—á–æ–ª–æ–≤—ñ—á–∏–π/–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∏–π –≥–æ–ª–æ—Å)'
          : 'Voice the story? (female/male/neutral voice)');
        userState[chatId] = { step: 'awaiting_voice', storyText, lang };
      } catch (err) {
        logError(err, { chatId, step: 'voice_suggestion' });
        await bot.sendMessage(chatId, lang === 'uk'
          ? '‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –ø–µ—Ä–µ–π—Ç–∏ –¥–æ –æ–∑–≤—É—á–∫–∏.'
          : '‚ö†Ô∏è Failed to continue to voicing step.');
        userState[chatId] = null;
      }
    
      return;
    }
    
    
    // –Ø–∫—â–æ –æ—á—ñ–∫—É—î–º–æ –≤–∏–±—ñ—Ä –≥–æ–ª–æ—Å—É
    if (userState[chatId]?.step === 'awaiting_voice') {
      const voice = text.toLowerCase().includes('—á–æ–ª') || text.toLowerCase().includes('male') ? 'male' :
                    text.toLowerCase().includes('–Ω–µ–π—Ç—Ä') || text.toLowerCase().includes('neutral') ? 'neutral' : 'female';
      bot.sendMessage(chatId, lang === 'uk' ? '–û–±–µ—Ä—ñ—Ç—å —ñ–Ω—Ç–æ–Ω–∞—Ü—ñ—é: –∑–≤–∏—á–∞–π–Ω–∞, –µ–º–æ—Ü—ñ–π–Ω–∞, –∫–∞–∑–∫–æ–≤–∞' : 'Choose intonation: normal, emotional, fairy-tale');
      userState[chatId] = { ...userState[chatId], step: 'awaiting_style', voice };
      return;
    }

    // –Ø–∫—â–æ –æ—á—ñ–∫—É—î–º–æ –≤–∏–±—ñ—Ä —ñ–Ω—Ç–æ–Ω–∞—Ü—ñ—ó
    if (userState[chatId]?.step === 'awaiting_style') {
      let style = 'default';
      if (text.toLowerCase().includes('–µ–º–æ—Ü') || text.toLowerCase().includes('emot')) style = 'emotional';
      else if (text.toLowerCase().includes('–∫–∞–∑–∫') || text.toLowerCase().includes('fairy')) style = 'narration';
      
      logAudioGeneration(chatId, userState[chatId].voice, style);
      bot.sendMessage(chatId, lang === 'uk' ? '–ì–µ–Ω–µ—Ä—É—é –∞—É–¥—ñ–æ...' : 'Generating audio...');
      
      const { storyText, voice, lang: userLangVal } = userState[chatId];
      const audio = await generateAudio(storyText, voice, userLangVal, style);
      bot.sendAudio(chatId, audio, {}, { filename: 'story.mp3', contentType: 'audio/mpeg' });
      userState[chatId] = null;
      return;
    }

    // –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
    if (text === '–ö–∞–∑–∫–∞' || text === 'Story') {
      bot.sendMessage(chatId, lang === 'uk' ? '–í–≤–µ–¥—ñ—Ç—å —Ç–µ–º—É –∫–∞–∑–∫–∏:' : 'Enter a story topic:');
      userState[chatId] = { step: 'awaiting_story_topic' };
      return;
    } else if (text === '–ó–∞–≥–∞–¥–∫–∏' || text === 'Riddles') {
      bot.sendMessage(chatId, lang === 'uk' ? '–û–±–µ—Ä—ñ—Ç—å –≤—ñ–∫: 3-4 –∞–±–æ 5-6' : 'Choose age: 3-4 or 5-6');
      userState[chatId] = { step: 'awaiting_riddle_age' };
      return;
    } else if (userState[chatId]?.step === 'awaiting_riddle_age') {
      const age = text.includes('5') ? '5-6' : '3-4';
      logRiddleGeneration(chatId, age, lang);
      const riddles = await generateRiddles(age, lang);
      bot.sendMessage(chatId, `${i18next.t('riddles_ready', { lng: lang })}\n\n${riddles}`);
      userState[chatId] = null;
      return;
    } else if (text === '–ö—Ä–µ–∞—Ç–∏–≤' || text === 'Creativity') {
      logPhraseGeneration(chatId, lang);
      const phrases = await generatePhrases(lang);
      bot.sendMessage(chatId, `${i18next.t('phrases_ready', { lng: lang })}\n\n${phrases}`);
      userState[chatId] = null;
      return;
    } else if (text === '–í—ñ–∑—É–∞–ª—å–Ω–∏–π –∫—Ä–µ–∞—Ç–∏–≤' || text === 'Visual Creativity') {
      logImageGeneration(chatId, 'abstract lines and objects, children creativity');
      bot.sendMessage(chatId, lang === 'uk' ? '–ì–µ–Ω–µ—Ä—É—é –∫—Ä–µ–∞—Ç–∏–≤–Ω–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è...' : 'Generating creative image...');
      const image = await generateImage('abstract lines and objects, children creativity');
      bot.sendPhoto(chatId, image, {}, { filename: 'creative.png', contentType: 'image/png' });
      bot.sendMessage(chatId, i18next.t('visual_creativity', { lng: lang }));
      userState[chatId] = null;
      return;
    } else if (text === 'üìä –ú–æ—ó –ª—ñ–º—ñ—Ç–∏' || text === 'üìä My Limits') {
      // TODO: Implement limit checking
      const limits = await checkLimit(chatId);
      const message = lang === 'uk' 
        ? `–í–∞—à—ñ –ø–æ—Ç–æ—á–Ω—ñ –ª—ñ–º—ñ—Ç–∏:\n\n–ó–∞–ª–∏—à–∏–ª–æ—Å—å –≥–µ–Ω–µ—Ä–∞—Ü—ñ–π: ${limits.remaining}\n–ó–∞–≥–∞–ª—å–Ω–∏–π –ª—ñ–º—ñ—Ç: ${limits.total}`
        : `Your current limits:\n\nRemaining generations: ${limits.remaining}\nTotal limit: ${limits.total}`;
      bot.sendMessage(chatId, message);
      return;
    } else if (text === 'üí≥ –û–ø–ª–∞—Ç–∞' || text === 'üí≥ Payment') {
      // TODO: Implement Stripe payment
      const paymentMessage = lang === 'uk'
        ? '–î–ª—è –æ–ø–ª–∞—Ç–∏ –ø–µ—Ä–µ–π–¥—ñ—Ç—å –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º: [Stripe Payment Link]'
        : 'To make a payment, follow the link: [Stripe Payment Link]';
      bot.sendMessage(chatId, paymentMessage);
      return;
    } else if (text === 'üéÅ –ó–∞–ø—Ä–æ—Å–∏—Ç–∏ –¥—Ä—É–≥–∞' || text === 'üéÅ Invite Friend') {
      // TODO: Implement invite link generation
      const inviteLink = `https://t.me/${process.env.BOT_USERNAME}?start=invite_${chatId}`;
      const inviteMessage = lang === 'uk'
        ? `–í–∞—à–µ –∑–∞–ø—Ä–æ—à—É–≤–∞–ª—å–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è:\n${inviteLink}\n\n–ó–∞–ø—Ä–æ—à—É–π—Ç–µ –¥—Ä—É–∑—ñ–≤ —Ç–∞ –æ—Ç—Ä–∏–º—É–π—Ç–µ –±–æ–Ω—É—Å–∏!`
        : `Your invite link:\n${inviteLink}\n\nInvite friends and get bonuses!`;
      bot.sendMessage(chatId, inviteMessage);
      return;
    }
  } catch (error) {
    logError(error, { chatId, text, state: userState[chatId] });
    bot.sendMessage(chatId, lang === 'uk' ? '–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.' : 'An error occurred. Please try again.');
    userState[chatId] = null;
  }
});

// TODO: –î–æ–¥–∞—Ç–∏ –æ–±—Ä–æ–±–∫—É –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∫–∞–∑–æ–∫, –∑–æ–±—Ä–∞–∂–µ–Ω—å, –∞—É–¥—ñ–æ, –∫—Ä–µ–∞—Ç–∏–≤–Ω–∏—Ö –∫–Ω–æ–ø–æ–∫ 